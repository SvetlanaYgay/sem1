

#Задача 34:Винни-Пух попросил Вас посмотреть, есть ли в его стихах ритм.
#Поскольку разобраться в его кричалках не настолько просто, насколько легко он их придумывает,
#Вам стоит написать программу. Винни-Пух считает, что ритм есть, если число слогов (т.е. число гласных букв)
#в каждой фразе стихотворения одинаковое. Фраза может состоять из одного слова, если во фразе несколько слов,
#то они разделяются дефисами. Фразы отделяются друг от друга пробелами. Стихотворение  Винни-Пух вбивает
#в программу с клавиатуры. В ответе напишите “Парам пам-пам”, если с ритмом все в порядке и “Пам парам”,
#если с ритмом все не в порядке
#Пример:
#Ввод: пара-ра-рам рам-пам-папам па-ра-па-дам
#Вывод: Парам пам-пам


def hit(str):
    str = str.split()
    list = []
    for word in str:
        result = 0
        for i in word:
            if i in 'аеёиоуыэюя':
                result += 1
        list.append(result)
    return len(list) == list.count(list[0])

print('Введите: пара-ра-рам рам-пам-папам па-ра-па-дам')
str = input()
if hit(str):
    print('Парам пам-пам')
else:
    print('Пам парам')


    #Задача 36: Напишите функцию print_operation_table(operation, num_rows=6, num_columns=6),
#которая принимает в качестве аргумента функцию, вычисляющую элемент по номеру строки и столбца.
#Аргументы num_rows и num_columns указывают число строк и столбцов таблицы, которые должны быть распечатаны.
#Нумерация строк и столбцов идет с единицы (подумайте, почему не с нуля).
#Примечание: бинарной операцией называется любая операция, у которой ровно два аргумента, как, например,
#у операции умножения.
#Пример:
#Ввод:`print_operation_table(lambda x, y: x * y) `
#Вывод:
#1 2 3 4 5 6

#2 4 6 8 10 12
#3 6 9 12 15 18
#4 8 12 16 20 24
#5 10 15 20 25 30
#6 12 18 24 30 36

def print_operation_table(operation, num_rows=6, num_columns=6):
    a = [[operation(i, j) for j in range(1, num_columns + 1)] for i in range(1, num_rows + 1)]
    for i in a:
        print(*[f"{x:>3}" for x in i])

print_operation_table(lambda x, y: x * y)






# Задача 30: Заполните массив элементами арифметической прогрессии. Её первый элемент, разность и количество
# элементов нужно ввести с клавиатуры. Формула для получения n-го члена прогрессии: a
# n = a1 + (n-1) * d.
# Каждое число вводится с новой строки.
# Ввод: 7 2 5
# Вывод: 7 9 11 13 15

# a1 = 7
# d = 2
# n = 5
# for i in range(n):
#     print(a1 + i * d, end=' ')
# print()
# print(*list(range(a1, a1+n*d ,d)))



# Задача 32:Определить индексы элементов массива (списка), значения которых принадлежат заданному диапазону
# (т.е. не меньше заданного минимума и не больше заданного максимума)
# Ввод: [-5, 9, 0, 3, -1, -2, 1, 4, -2, 10, 2, 0, -9, 8, 10, -9, 0, -5, -5, 7]
# Вывод: [1, 9, 13, 14, 19]

list_1 = [-5, 9, 0, 3, -1, -2, 1, 4, -2, 10, 2, 0, -9, 8, 10, -9, 0, -5, -5, 7]
list_2 = []
max_num = 10
min_num = 6
for i in range(len(list_1)):
    if min_num <= list_1[i] <= max_num:
        list_2.append(i)
print(list_2)

list_3 = [i for i in range(len(list_1)) if min_num <= list_1[i] <= max_num]
list_4 = [i if min_num <= list_1[i] <= max_num else '*' for i in range(len(list_1))]


# Задача 22: Даны два неупорядоченных набора целых чисел (может быть, с повторениями). Выдать без повторений в порядке возрастания все те числа, 
# которые встречаются в обоих наборах.
# Пользователь вводит 2 числа. n — кол-во элементов первого множества.
# m — кол-во элементов второго множества. Затем пользователь
# вводит сами элементы множеств.
# from random import randint

# n = int (input ('Введи размер первого набора чисел'))
# m = int (input ('Введи размер второго набора чисел'))
# set_1 = set(randint (1, 10) for i in range(n))
# set_2 = set(randint (1, 10) for i in range(m))

# set_3 = set_1.intersection(set_2)

# print(set_1)
# print(set_2)
# print(sorted(set_3))




# Задача 24: В фермерском хозяйстве в Карелии выращивают чернику. 
# Она растёт на круглой грядке, причём кусты высажены только по 
# окружности. Таким образом, у каждого куста есть ровно 
# два соседних. Всего на грядке растёт N кустов.
# Эти кусты обладают разной урожайностью, поэтому ко времени сбора 
# на них выросло различное число ягод — на i-ом кусте выросло ai ягод.
# В этом фермерском хозяйстве внедрена система автоматического сбора 
# черники. Эта система состоит из управляющего модуля и нескольких 
# собирающих модулей. Собирающий модуль за один заход, находясь 
# непосредственно перед некоторым кустом, собирает ягоды с этого 
# куста и с двух соседних с ним.
# Напишите программу для нахождения максимального числа ягод, 
# которое может собрать за один заход собирающий модуль, находясь 
# перед некоторым кустом заданной во входном файле грядки.

# from random import randint

# list_1 = list(randint(1, 10) for i in range(int(input('Введи количество кустов: '))))
# print(list_1)

# max = 0

# for i in range(len(list_1)):
#     bush = list_1[i-1]+list_1[i]+list_1[i+1 - len(list_1)]
#     if bush > max:
#         max = bush
# print(max)
